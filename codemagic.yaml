workflows:
  # Simplified workflow specifically for AltStore distribution (no code signing)
  altstore-build:
    name: NutriLens AltStore Build (Unsigned)
    instance_type: mac_mini_m1
    environment:
      node: latest
      xcode: latest
      cocoapods: default
    scripts:
      - name: Install npm dependencies
        script: |
          npm ci
      
      - name: Install Ionic CLI
        script: |
          npm install -g @ionic/cli
      
      - name: Build web app
        script: |
          npm run build
      
      - name: Setup Capacitor
        script: |
          # Make sure the iOS platform is added
          npx cap add ios || true
          npx cap sync ios
      
      - name: Install Codemagic CLI tools
        script: |
          pip3 install codemagic-cli-tools
      
      - name: Create unsigned IPA
        script: |
          # Navigate to the iOS project directory
          cd ios/App
          
          # Create export options plist for development (no signing)
          cat > exportOptions.plist << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>development</string>
            <key>compileBitcode</key>
            <false/>
            <key>signingStyle</key>
            <string>manual</string>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>thinning</key>
            <string>&lt;none&gt;</string>
          </dict>
          </plist>
          EOL
          
          # Build the project without codesigning
          xcode-project build-ipa \
            --workspace App.xcworkspace \
            --scheme App \
            --config Debug \
            --no-codesign \
            --output-path $CM_BUILD_DIR/build/ios/App.ipa
          
          # Verify that the IPA was created
          ls -la $CM_BUILD_DIR/build/ios/App.ipa || echo "IPA not created"
      
      # Fallback approach if xcode-project build-ipa doesn't work
      - name: Fallback - Build Archive
        script: |
          if [ ! -f "$CM_BUILD_DIR/build/ios/App.ipa" ]; then
            echo "Primary build failed, trying archive method..."
            cd ios/App
            xcodebuild \
              -workspace App.xcworkspace \
              -scheme App \
              -configuration Debug \
              -archivePath $CM_BUILD_DIR/build/App.xcarchive \
              archive \
              CODE_SIGN_IDENTITY="" \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGNING_ALLOWED=NO
            
            # Export the archive as IPA
            xcodebuild \
              -exportArchive \
              -archivePath $CM_BUILD_DIR/build/App.xcarchive \
              -exportPath $CM_BUILD_DIR/build/ios \
              -exportOptionsPlist exportOptions.plist || true
          fi
      
      # Second fallback using xcrun
      - name: Fallback - Package with xcrun
        script: |
          if [ ! -f "$CM_BUILD_DIR/build/ios/App.ipa" ]; then
            echo "Archive method failed, trying xcrun method..."
            if [ -d "$CM_BUILD_DIR/build/App.xcarchive/Products/Applications/App.app" ]; then
              mkdir -p $CM_BUILD_DIR/build/ios/Payload
              cp -r $CM_BUILD_DIR/build/App.xcarchive/Products/Applications/App.app $CM_BUILD_DIR/build/ios/Payload/
              cd $CM_BUILD_DIR/build/ios
              zip -r App.ipa Payload
              ls -la App.ipa
            else
              echo "No app found in archive to package"
            fi
          fi
      
      # Create info about the build for debugging
      - name: Output build info
        script: |
          echo "=== Build Output Files ==="
          find $CM_BUILD_DIR/build -type f -name "*.ipa" -o -name "*.app" | sort
          
          if [ -d "$CM_BUILD_DIR/build/App.xcarchive" ]; then
            echo "=== Archive Info ==="
            cat $CM_BUILD_DIR/build/App.xcarchive/Info.plist || echo "No Info.plist found"
          fi
          
          echo "=== Final IPA Status ==="
          ls -la $CM_BUILD_DIR/build/ios/App.ipa || echo "IPA not found in expected location"
      
      # Create a zip file containing the IPA with altstore-friendly structure
      - name: Package IPA for AltStore download
        script: |
          if [ -f "$CM_BUILD_DIR/build/ios/App.ipa" ]; then
            mkdir -p $CM_BUILD_DIR/AltStore-Package
            cp $CM_BUILD_DIR/build/ios/App.ipa $CM_BUILD_DIR/AltStore-Package/NutriLens.ipa
            
            # Create a simple HTML page for direct download
            cat > $CM_BUILD_DIR/AltStore-Package/index.html << EOL
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>NutriLens IPA Download</title>
                <style>
                    body {
                        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
                        max-width: 500px;
                        margin: 0 auto;
                        padding: 20px;
                        text-align: center;
                    }
                    h1 {
                        color: #333;
                    }
                    .download-btn {
                        display: inline-block;
                        background-color: #007aff;
                        color: white;
                        padding: 12px 30px;
                        border-radius: 10px;
                        text-decoration: none;
                        font-weight: bold;
                        margin: 20px 0;
                    }
                    .instructions {
                        text-align: left;
                        background-color: #f7f7f7;
                        padding: 20px;
                        border-radius: 10px;
                        margin-top: 20px;
                    }
                    .instructions li {
                        margin-bottom: 10px;
                    }
                </style>
            </head>
            <body>
                <h1>NutriLens App</h1>
                <p>Click the button below to download the unsigned IPA file:</p>
                <a href="NutriLens.ipa" class="download-btn" download>Download NutriLens IPA</a>
                
                <div class="instructions">
                    <h2>Installation Instructions:</h2>
                    <ol>
                        <li>Download the IPA file to your computer</li>
                        <li>Make sure AltServer is running on your computer</li>
                        <li>Connect your iPhone to your computer</li>
                        <li>Open AltStore on your iPhone</li>
                        <li>Go to "My Apps" tab and tap the "+" button</li>
                        <li>Select the downloaded IPA file</li>
                        <li>Wait for AltStore to sign and install the app</li>
                    </ol>
                </div>
            </body>
            </html>
            EOL
            
            # Create metadata JSON for AltStore
            cat > $CM_BUILD_DIR/AltStore-Package/app.json << EOL
            {
              "name": "NutriLens",
              "bundleIdentifier": "io.nutritlens.app",
              "version": "1.0.0",
              "versionDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
              "downloadURL": "https://app.codemagic.io/artifacts/$(echo $CM_BUILD_URL | cut -d'/' -f5)/AltStore-Package/NutriLens.ipa",
              "developerName": "NutriLens",
              "localizedDescription": "AI-powered nutrition tracking application"
            }
            EOL
            
            # Create the zip package
            cd $CM_BUILD_DIR
            zip -r AltStore-NutriLens.zip AltStore-Package
            echo "AltStore package created at $CM_BUILD_DIR/AltStore-NutriLens.zip"
          else
            echo "No IPA file found to package"
          fi
      
      # Upload to file.io for easy download
      - name: Upload to file.io (temporary file sharing)
        script: |
          if [ -f "$CM_BUILD_DIR/build/ios/App.ipa" ]; then
            # Rename IPA for clarity
            cp $CM_BUILD_DIR/build/ios/App.ipa $CM_BUILD_DIR/NutriLens.ipa
            
            # Get current date for filename
            DATE=$(date +"%Y%m%d")
            
            # Upload to file.io
            RESPONSE=$(curl -F "file=@$CM_BUILD_DIR/NutriLens.ipa" https://file.io)
            DOWNLOAD_URL=$(echo $RESPONSE | grep -o 'https://file.io/[A-Za-z0-9]*')
            
            # Create a text file with the download link
            echo "NutriLens IPA Download Link (valid for 14 days):" > $CM_BUILD_DIR/download-link.txt
            echo "$DOWNLOAD_URL" >> $CM_BUILD_DIR/download-link.txt
            echo "" >> $CM_BUILD_DIR/download-link.txt
            echo "Instructions:" >> $CM_BUILD_DIR/download-link.txt
            echo "1. Open this link on your computer" >> $CM_BUILD_DIR/download-link.txt
            echo "2. Download the IPA file" >> $CM_BUILD_DIR/download-link.txt
            echo "3. Use AltStore to install the app on your device" >> $CM_BUILD_DIR/download-link.txt
            
            echo "IPA uploaded to: $DOWNLOAD_URL"
            echo "Download link saved to download-link.txt"
          else
            echo "No IPA file found to upload"
          fi
    
    artifacts:
      - $CM_BUILD_DIR/build/ios/*.ipa
      - $CM_BUILD_DIR/NutriLens.ipa
      - $CM_BUILD_DIR/AltStore-NutriLens.zip
      - $CM_BUILD_DIR/download-link.txt
      - $CM_BUILD_DIR/AltStore-Package/NutriLens.ipa
      - $CM_BUILD_DIR/AltStore-Package/index.html
      - $CM_BUILD_DIR/build/**/*.log
      - $CM_BUILD_DIR/build/App.xcarchive/Info.plist