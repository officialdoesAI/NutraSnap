workflows:
  # Simplified workflow specifically for AltStore distribution
  altstore-build:
    name: NutriLens AltStore Build
    instance_type: mac_mini_m1
    environment:
      node: latest
      xcode: latest
      cocoapods: default
      vars:
        BUNDLE_ID: "io.nutritlens.app"
        XCODE_SCHEME: "App"
        PRODUCT_NAME: "NutriLens"
    scripts:
      - name: Install npm dependencies
        script: |
          npm ci
      
      - name: Install Ionic CLI
        script: |
          npm install -g @ionic/cli
      
      - name: Build web app
        script: |
          npm run build
      
      - name: Setup Capacitor
        script: |
          # Make sure the iOS platform is added
          npx cap add ios || true
          npx cap sync ios
      
      - name: Set up code signing
        script: |
          # Create a temporary keychain
          KEYCHAIN_NAME="ios-build.keychain"
          KEYCHAIN_PASSWORD="temporary"
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security list-keychains -d user -s "$KEYCHAIN_NAME" $(security list-keychains -d user | sed s/\"//g)
          security set-keychain-settings "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          
          # If you have a provisioning profile
          if [ ! -z "$PROVISIONING_PROFILE" ]; then
            echo $PROVISIONING_PROFILE | base64 --decode > /tmp/profile.mobileprovision
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            UUID=$(grep -a -A 1 "UUID" /tmp/profile.mobileprovision | grep -o "[-A-Z0-9]\{36\}")
            cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$UUID".mobileprovision
            echo "Installed provisioning profile $UUID"
          else
            echo "No provisioning profile provided, using automatic signing"
          fi
          
          # Update the Xcode project with the team ID
          cd ios/App
          echo "Setting team ID to: $XCODE_DEVELOPMENT_TEAM"
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $BUNDLE_ID" Info.plist
      
      - name: Create exportOptions.plist for ad-hoc distribution
        script: |
          cat > ios/App/exportOptions.plist << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>development</string>
            <key>teamID</key>
            <string>$XCODE_DEVELOPMENT_TEAM</string>
            <key>compileBitcode</key>
            <false/>
            <key>signingStyle</key>
            <string>automatic</string>
          </dict>
          </plist>
          EOL
      
      - name: Build and archive iOS app
        script: |
          cd ios/App
          echo "Building with team ID: $XCODE_DEVELOPMENT_TEAM"
          # For detailed logs
          set -x 
          xcodebuild -workspace App.xcworkspace -scheme App -configuration Debug \
            -archivePath $CM_BUILD_DIR/build/App.xcarchive archive \
            -allowProvisioningUpdates \
            CODE_SIGN_IDENTITY="Apple Development" \
            DEVELOPMENT_TEAM=$XCODE_DEVELOPMENT_TEAM \
            PROVISIONING_PROFILE_SPECIFIER="" \
            CODE_SIGN_STYLE=Automatic \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" 2>&1 | tee $CM_BUILD_DIR/xcodebuild_archive.log
      
      - name: Create IPA for AltStore
        script: |
          cd ios/App
          if [ -d "$CM_BUILD_DIR/build/App.xcarchive" ]; then
            xcodebuild -exportArchive \
              -archivePath $CM_BUILD_DIR/build/App.xcarchive \
              -exportPath $CM_BUILD_DIR/build/ios \
              -exportOptionsPlist exportOptions.plist 2>&1 | tee $CM_BUILD_DIR/xcodebuild_export.log
          else
            echo "Archive not found at $CM_BUILD_DIR/build/App.xcarchive"
            echo "Build failed"
            exit 1
          fi
    artifacts:
      - $CM_BUILD_DIR/build/ios/*.ipa
      - $CM_BUILD_DIR/xcodebuild_*.log
      - $CM_BUILD_DIR/build/App.xcarchive/Info.plist