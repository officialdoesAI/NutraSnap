workflows:
  altstore-build:
    name: NutriLens AltStore Build (Unsigned)
    instance_type: mac_mini_m1
    environment:
      node: latest
      xcode: latest
      cocoapods: default
    scripts:
      - name: Install npm dependencies
        script: npm ci
      
      - name: Install Ionic CLI
        script: npm install -g @ionic/cli
      
      - name: Build web app
        script: npm run build
      
      - name: Setup Capacitor
        script: npx cap add ios || true && npx cap sync ios
      
      - name: Install Codemagic CLI tools
        script: |
          pip3 install -U codemagic-cli-tools
          pip3 install -U pyyaml
      
      - name: Create Export Options
        script: |
          # Store XML strings in plain files instead of heredocs
          mkdir -p $CM_BUILD_DIR/config
          
          # Create export options plist
          echo "Creating export options plist"
          echo '<?xml version="1.0" encoding="UTF-8"?>' > $CM_BUILD_DIR/config/exportOptions.plist
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> $CM_BUILD_DIR/config/exportOptions.plist
          echo '<plist version="1.0"><dict>' >> $CM_BUILD_DIR/config/exportOptions.plist
          echo '  <key>method</key><string>development</string>' >> $CM_BUILD_DIR/config/exportOptions.plist
          echo '  <key>compileBitcode</key><false/>' >> $CM_BUILD_DIR/config/exportOptions.plist
          echo '  <key>signingStyle</key><string>manual</string>' >> $CM_BUILD_DIR/config/exportOptions.plist
          echo '  <key>stripSwiftSymbols</key><false/>' >> $CM_BUILD_DIR/config/exportOptions.plist
          echo '  <key>thinning</key><string>&lt;none&gt;</string>' >> $CM_BUILD_DIR/config/exportOptions.plist
          echo '</dict></plist>' >> $CM_BUILD_DIR/config/exportOptions.plist
          
          # Create backup Info.plist
          echo "Creating backup Info.plist"
          echo '<?xml version="1.0" encoding="UTF-8"?>' > $CM_BUILD_DIR/config/Info.plist
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> $CM_BUILD_DIR/config/Info.plist
          echo '<plist version="1.0"><dict>' >> $CM_BUILD_DIR/config/Info.plist
          echo '  <key>CFBundleExecutable</key><string>App</string>' >> $CM_BUILD_DIR/config/Info.plist
          echo '  <key>CFBundleIdentifier</key><string>com.nutritlens.app</string>' >> $CM_BUILD_DIR/config/Info.plist
          echo '  <key>CFBundleName</key><string>NutriLens</string>' >> $CM_BUILD_DIR/config/Info.plist
          echo '  <key>CFBundleDisplayName</key><string>NutriLens</string>' >> $CM_BUILD_DIR/config/Info.plist
          echo '  <key>CFBundleVersion</key><string>1.0</string>' >> $CM_BUILD_DIR/config/Info.plist
          echo '  <key>CFBundleShortVersionString</key><string>1.0</string>' >> $CM_BUILD_DIR/config/Info.plist
          echo '  <key>CFBundleInfoDictionaryVersion</key><string>6.0</string>' >> $CM_BUILD_DIR/config/Info.plist
          echo '  <key>CFBundlePackageType</key><string>APPL</string>' >> $CM_BUILD_DIR/config/Info.plist
          echo '  <key>UIRequiresFullScreen</key><true/>' >> $CM_BUILD_DIR/config/Info.plist
          echo '</dict></plist>' >> $CM_BUILD_DIR/config/Info.plist
          
          # Copy export options to ios/App directory
          cp $CM_BUILD_DIR/config/exportOptions.plist ios/App/
      
      - name: Primary build attempt
        script: |
          cd ios/App
          
          # Clean derived data
          rm -rf ~/Library/Developer/Xcode/DerivedData
          
          # Update project dependencies
          pod install || echo "Pod install failed, continuing anyway"
          
          # Debug - log build environment
          echo "Xcode version: $(xcodebuild -version)"
          
          # First build approach - direct to app
          echo "Building app directly..."
          mkdir -p $CM_BUILD_DIR/build/ios/Payload
          
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Debug \
            -sdk iphoneos \
            CONFIGURATION_BUILD_DIR=$CM_BUILD_DIR/build/ios/Payload \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            ENABLE_BITCODE=NO || echo "Direct build failed"
            
          # Check if direct build succeeded
          if [ -d "$CM_BUILD_DIR/build/ios/Payload/App.app" ]; then
            echo "Direct build successful, creating IPA"
            cd $CM_BUILD_DIR/build/ios
            
            # Add mobileprovision for AltStore
            touch $CM_BUILD_DIR/build/ios/Payload/App.app/embedded.mobileprovision
            
            # Create the IPA
            zip -qr App.ipa Payload
            echo "IPA created successfully"
          else
            echo "Direct build failed, trying archive method..."
            
            # Second build approach - archive
            xcodebuild -workspace App.xcworkspace \
              -scheme App \
              -configuration Debug \
              -archivePath $CM_BUILD_DIR/build/App.xcarchive \
              CODE_SIGN_IDENTITY="" \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGNING_ALLOWED=NO \
              ENABLE_BITCODE=NO \
              archive || echo "Archive build failed"
              
            # Check if archive succeeded
            if [ -d "$CM_BUILD_DIR/build/App.xcarchive/Products/Applications/App.app" ]; then
              echo "Archive successful, creating IPA"
              mkdir -p $CM_BUILD_DIR/build/ios/Payload
              cp -r $CM_BUILD_DIR/build/App.xcarchive/Products/Applications/App.app $CM_BUILD_DIR/build/ios/Payload/
              
              # Add mobileprovision for AltStore
              touch $CM_BUILD_DIR/build/ios/Payload/App.app/embedded.mobileprovision
              
              cd $CM_BUILD_DIR/build/ios
              zip -qr App.ipa Payload
              echo "IPA created successfully"
            else
              echo "Both build methods failed"
            fi
          fi
      
      - name: Create fallback IPA if needed
        script: |
          if [ ! -f "$CM_BUILD_DIR/build/ios/App.ipa" ]; then
            echo "Build attempts failed, creating basic IPA structure..."
            
            # Create directory structure
            mkdir -p $CM_BUILD_DIR/basic-build/Payload/App.app
            cd $CM_BUILD_DIR/basic-build
            
            # Copy the Info.plist
            cp $CM_BUILD_DIR/config/Info.plist Payload/App.app/
            
            # Create placeholder executable
            echo '#!/bin/sh' > Payload/App.app/App
            echo '# Placeholder binary' >> Payload/App.app/App
            chmod +x Payload/App.app/App
            
            # Add required files for AltStore
            touch Payload/App.app/embedded.mobileprovision
            echo "APPL????" > Payload/App.app/PkgInfo
            
            # Create the IPA
            zip -r $CM_BUILD_DIR/build/ios/App.ipa Payload
            echo "Basic IPA structure created"
          fi
      
      - name: Prepare files for download
        script: |
          # Create instructions
          echo "How to install NutriLens IPA with AltStore:" > $CM_BUILD_DIR/instructions.txt
          echo "1. Download the IPA file to your computer" >> $CM_BUILD_DIR/instructions.txt
          echo "2. Open AltStore on your iOS device" >> $CM_BUILD_DIR/instructions.txt
          echo "3. In AltStore, go to My Apps tab and tap + button" >> $CM_BUILD_DIR/instructions.txt
          echo "4. Select the downloaded IPA file" >> $CM_BUILD_DIR/instructions.txt
          
          # Create build info
          echo "Build Date: $(date)" > $CM_BUILD_DIR/build-info.txt
          echo "Xcode Version: $(xcodebuild -version | head -n 1)" >> $CM_BUILD_DIR/build-info.txt
          
          # Copy final IPA
          if [ -f "$CM_BUILD_DIR/build/ios/App.ipa" ]; then
            cp $CM_BUILD_DIR/build/ios/App.ipa $CM_BUILD_DIR/NutriLens.ipa
            echo "IPA file copied successfully"
          else
            echo "No IPA file found"
          fi
    
    artifacts:
      - $CM_BUILD_DIR/NutriLens.ipa
      - $CM_BUILD_DIR/instructions.txt
      - $CM_BUILD_DIR/build-info.txt
      - $CM_BUILD_DIR/build/ios/App.ipa