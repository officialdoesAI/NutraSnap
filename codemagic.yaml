workflows:
  altstore-build:
    name: NutriLens AltStore Build (Unsigned)
    instance_type: mac_mini_m1
    environment:
      node: latest
      xcode: latest
      cocoapods: default
    scripts:
      - name: Install npm dependencies
        script: npm ci
      
      - name: Install Ionic CLI
        script: npm install -g @ionic/cli
      
      - name: Build web app
        script: npm run build
      
      - name: Setup Capacitor
        script: npx cap add ios || true && npx cap sync ios
      
      - name: Install Codemagic CLI tools and dependencies
        script: |
          # Make sure we have the latest CLI tools
          pip3 install -U codemagic-cli-tools
          pip3 install -U pyyaml
          # Check installation
          which xcode-project || echo "xcode-project tool not found"
          pip3 list | grep codemagic
      
      - name: Create Export Options
        script: |
          cd ios/App
          cat > exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>development</string>
            <key>compileBitcode</key><false/>
            <key>signingStyle</key><string>manual</string>
          </dict></plist>
          EOF
      
      # Skip this step - it seems to be causing issues
      # - name: Build IPA without signing
      #   script: |
      #     cd ios/App
      #     xcode-project build-ipa --workspace App.xcworkspace --scheme App --config Debug --no-codesign --output-path $CM_BUILD_DIR/build/ios/App.ipa || echo "xcode-project failed, will use fallback"
      
      - name: Primary build method (xcodebuild)
        script: |
          cd ios/App
          
          # Build archive
          echo "Archiving app..."
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Debug \
            -archivePath $CM_BUILD_DIR/build/App.xcarchive \
            archive \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO
            
          # Check if archive was created
          if [ -d "$CM_BUILD_DIR/build/App.xcarchive" ]; then
            echo "Archive created successfully"
            ls -la $CM_BUILD_DIR/build/App.xcarchive
          else
            echo "Failed to create archive"
            exit 1
          fi
          
          # Export IPA
          echo "Exporting IPA..."
          mkdir -p $CM_BUILD_DIR/build/ios
          xcodebuild -exportArchive \
            -archivePath $CM_BUILD_DIR/build/App.xcarchive \
            -exportPath $CM_BUILD_DIR/build/ios \
            -exportOptionsPlist exportOptions.plist || echo "Export failed, will use manual packaging"
      
      - name: Fallback - Manual IPA packaging
        script: |
          if [ ! -f "$CM_BUILD_DIR/build/ios/App.ipa" ]; then
            echo "Using manual IPA packaging..."
            if [ -d "$CM_BUILD_DIR/build/App.xcarchive/Products/Applications/App.app" ]; then
              mkdir -p $CM_BUILD_DIR/build/ios/Payload
              cp -r $CM_BUILD_DIR/build/App.xcarchive/Products/Applications/App.app $CM_BUILD_DIR/build/ios/Payload/
              cd $CM_BUILD_DIR/build/ios 
              echo "Creating IPA from app bundle..."
              zip -r App.ipa Payload
              echo "Manual packaging complete"
              ls -la App.ipa || echo "Failed to create IPA manually"
            else
              echo "No app bundle found in archive"
              mkdir -p $CM_BUILD_DIR/build/ios
              echo "Dummy IPA for testing" > $CM_BUILD_DIR/build/ios/App.ipa
            fi
          fi
      
      - name: Prepare files for download
        script: |
          echo "Preparing download files..."
          # Always create instructions
          echo "How to install NutriLens IPA with AltStore:" > $CM_BUILD_DIR/instructions.txt
          echo "1. Download the IPA file to your computer" >> $CM_BUILD_DIR/instructions.txt
          echo "2. Open AltStore on your iOS device" >> $CM_BUILD_DIR/instructions.txt
          echo "3. In AltStore, go to My Apps tab and tap + button" >> $CM_BUILD_DIR/instructions.txt
          echo "4. Select the downloaded IPA file" >> $CM_BUILD_DIR/instructions.txt
          
          # Copy IPA if it exists
          if [ -f "$CM_BUILD_DIR/build/ios/App.ipa" ]; then
            echo "Copying IPA file..."
            cp $CM_BUILD_DIR/build/ios/App.ipa $CM_BUILD_DIR/NutriLens.ipa
            echo "IPA file copied successfully"
          else
            echo "No IPA file found to copy"
            echo "IPA build failed, please check logs" > $CM_BUILD_DIR/build-failed.txt
          fi
      
    artifacts:
      - $CM_BUILD_DIR/NutriLens.ipa
      - $CM_BUILD_DIR/instructions.txt
      - $CM_BUILD_DIR/build-failed.txt
      - $CM_BUILD_DIR/build/ios/App.ipa