workflows:
  altstore-build:
    name: NutriLens AltStore Build (Unsigned)
    instance_type: mac_mini_m1
    environment:
      node: latest
      xcode: latest
      cocoapods: default
    scripts:
      - name: Install npm dependencies
        script: npm ci
      
      - name: Install Ionic CLI
        script: npm install -g @ionic/cli
      
      - name: Build web app
        script: npm run build
      
      - name: Setup Capacitor
        script: npx cap add ios || true && npx cap sync ios
      
      - name: Create Export Options
        script: |
          cd ios/App
          cat > exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>development</string>
            <key>compileBitcode</key><false/>
            <key>signingStyle</key><string>manual</string>
          </dict></plist>
          EOF
      
      - name: Build IPA without signing
        script: |
          cd ios/App
          xcode-project build-ipa --workspace App.xcworkspace --scheme App --config Debug --no-codesign --output-path $CM_BUILD_DIR/build/ios/App.ipa
      
      - name: Fallback build method
        script: |
          if [ ! -f "$CM_BUILD_DIR/build/ios/App.ipa" ]; then
            cd ios/App
            xcodebuild -workspace App.xcworkspace -scheme App -configuration Debug -archivePath $CM_BUILD_DIR/build/App.xcarchive archive CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
            
            xcodebuild -exportArchive -archivePath $CM_BUILD_DIR/build/App.xcarchive -exportPath $CM_BUILD_DIR/build/ios -exportOptionsPlist exportOptions.plist || true
          fi
      
      - name: Manual packaging
        script: |
          if [ ! -f "$CM_BUILD_DIR/build/ios/App.ipa" ] && [ -d "$CM_BUILD_DIR/build/App.xcarchive/Products/Applications/App.app" ]; then
            mkdir -p $CM_BUILD_DIR/build/ios/Payload
            cp -r $CM_BUILD_DIR/build/App.xcarchive/Products/Applications/App.app $CM_BUILD_DIR/build/ios/Payload/
            cd $CM_BUILD_DIR/build/ios && zip -r App.ipa Payload
          fi
      
      - name: Prepare files for download
        script: |
          if [ -f "$CM_BUILD_DIR/build/ios/App.ipa" ]; then
            cp $CM_BUILD_DIR/build/ios/App.ipa $CM_BUILD_DIR/NutriLens.ipa
            echo "How to install NutriLens IPA with AltStore:" > $CM_BUILD_DIR/instructions.txt
            echo "1. Download the IPA file to your computer" >> $CM_BUILD_DIR/instructions.txt
            echo "2. Open AltStore on your iOS device" >> $CM_BUILD_DIR/instructions.txt
            echo "3. In AltStore, go to My Apps tab and tap + button" >> $CM_BUILD_DIR/instructions.txt
            echo "4. Select the downloaded IPA file" >> $CM_BUILD_DIR/instructions.txt
          fi
      
      - name: Create download link
        script: |
          if [ -f "$CM_BUILD_DIR/NutriLens.ipa" ]; then
            # Create a safe file sharing link
            echo "Download links will be available in the build artifacts" > $CM_BUILD_DIR/download-info.txt
            # Attempt to get a direct link but don't rely on it working
            curl -s -F "file=@$CM_BUILD_DIR/NutriLens.ipa" https://file.io | grep -o 'https://file.io/[A-Za-z0-9]*' >> $CM_BUILD_DIR/download-info.txt || true
          fi
    
    artifacts:
      - $CM_BUILD_DIR/NutriLens.ipa
      - $CM_BUILD_DIR/instructions.txt
      - $CM_BUILD_DIR/download-info.txt
      - $CM_BUILD_DIR/build/ios/*.ipa